### SETUP EFFECTS


# COMBINED

WEALTH_setup_governorship = {
	WEALTH_setup_upper_strata = yes
	WEALTH_setup_middle_strata = yes
	WEALTH_setup_lower_strata = yes
	WEALTH_setup_proletariat = yes
	WEALTH_setup_indentured = yes
	WEALTH_setup_tribesmen = yes
	WEALTH_setup_slaves = yes
	###
	WEALTH_setup_growth_rate = yes
}

# INDIVIDUAL POP WEALTH SETUP

WEALTH_setup_upper_strata = {

	# Scope = governorship
	set_variable = {
		name = upper_strata_wealth
		value = WEALTH_starting_upper_strata
	}
}

WEALTH_setup_middle_strata = {
	# Scope = governorship
	set_variable = {
		name = middle_strata_wealth
		value = WEALTH_starting_middle_strata
	}
}

WEALTH_setup_lower_strata = {
	# Scope = governorship
	set_variable = {
		name = lower_strata_wealth
		value = WEALTH_starting_lower_strata
	}
}

WEALTH_setup_proletariat = {
	# Scope = governorship
	set_variable = {
		name = proletariat_wealth
		value = WEALTH_starting_proletariat
	}
}

WEALTH_setup_indentured = {
	# Scope = governorship
	set_variable = {
		name = indentured_wealth
		value = WEALTH_starting_indentured
	}
}

WEALTH_setup_tribesmen = {
	# Scope = governorship
	set_variable = {
		name = tribesmen_wealth
		value = WEALTH_starting_tribesmen
	}
}

WEALTH_setup_slaves = {
	# Scope = governorship
	set_variable = {
		name = slaves_wealth
		value = WEALTH_starting_slaves
	}
}

# GROWTH RATE SETUP

WEALTH_setup_growth_rate = {
	# Scope = governorship
	set_variable = {
		name = WEALTH_growth_rate
		value = 1.01
	}
}

### CHANGE EFFECTS

# APPLYING GROWTH RATE (DEBUG ONLY)

WEALTH_apply_growth_rate_all_debug = {
	# Scope = governorship
	change_variable = {
		name = upper_strata_wealth
		multiply = var:WEALTH_growth_rate
	}
	change_variable = {
		name = middle_strata_wealth
		multiply = var:WEALTH_growth_rate
	}
	change_variable = {
		name = lower_strata_wealth
		multiply = var:WEALTH_growth_rate
	}
	change_variable = {
		name = proletariat_wealth
		multiply = var:WEALTH_growth_rate
	}
	change_variable = {
		name = indentured_wealth
		multiply = var:WEALTH_growth_rate
	}
	change_variable = {
		name = slaves_wealth
		multiply = var:WEALTH_growth_rate
	}
}

WEALTH_modify_pending_change = {
	# Scope: Governorship
	# Called: ad-hoc
	# Function: Add wealth to a pending change
	# Every quarter, the pending change is applied to the pop group, and the previous quarter's ammount is stored so that it can be compared in terms of relative growth/shrinkage of wealth	
	# Args:
	# poptype = poptype
	# function = add or subtract (or multiply or divide if feeling frisky)
	# amount = number amount or reference to var/svalue with number amount
	change_variable = {
		name = PENDING_$poptype$_wealth
		$function$ = $amount$
	}
}

WEALTH_modify_pending_change_conditional = {
	# Scope: Governorship
	# Called: ad-hoc
	# Function: Add wealth to a pending change, with (a) condition(s)
	# Every quarter, the pending change is applied to the pop group, and the previous quarter's ammount is stored so that it can be compared in terms of relative growth/shrinkage of wealth	
	# Args:
	# poptype = poptype
	# function = add or subtract (or multiply or divide if feeling frisky)
	# conditions = conditions for adding the wealth to the poptype's pool.
	# amount = number amount or reference to var/svalue with number amount
	if = {
		limit = {
			$conditions$
		}
		change_variable = {
			name = PENDING_$poptype$_wealth
			$function$ = $amount$
		}
	}
}

WEALTH_add_income_from_wholesale_food = {
	# Scope: governorship
	# Called: ad-hoc
	# Function: Give wealth to each strata group based on their share of the wholesale
	WEALTH_modify_pending_change = {
		poptype = upper_strata
		function = add
		amount = TRADE_local_wholesale_income_upper_strata_food
	}
}

WEALTH_startup_set_pending_change_variables = {
	# Scope: governorship
	# Called: at start of game
	# Function: Prevent the need for an if check in the modify or apply pending change scripted effect, by setting up empty pending wealth change variables at game start
	set_variable = {
		name = PENDING_upper_strata_wealth
		value = 0
	}
	set_variable = {
		name = PENDING_middle_strata_wealth
		value = 0
	}
	set_variable = {
		name = PENDING_lower_strata_wealth
		value = 0
	}
	set_variable = {
		name = PENDING_proletariat_wealth
		value = 0
	}
	set_variable = {
		name = PENDING_indentured_wealth
		value = 0
	}
	set_variable = {
		name = PENDING_tribesmen_wealth
		value = 0
	}
	set_variable = {
		name = PENDING_slaves_wealth
		value = 0
	}
}

WEALTH_apply_pending_changes = {
	# Scope: Governorship
	# Called: quarterly
	# Function: Run all WEALTH_apply_pending_change effects for poptypes
	WEALTH_apply_pending_change = {
		poptype = upper_strata
	}
	WEALTH_apply_pending_change = {
		poptype = middle_strata
	}
	WEALTH_apply_pending_change = {
		poptype = lower_strata
	}
	WEALTH_apply_pending_change = {
		poptype = proletariat
	}
	WEALTH_apply_pending_change = {
		poptype = indentured
	}
	WEALTH_apply_pending_change = {
		poptype = tribesmen
	}
	WEALTH_apply_pending_change = {
		poptype = slaves
	}
}

WEALTH_apply_pending_change = {
	# Scope: Governorship
	# Called: quarterly
	# Function: Add the pending wealth changes to every pop's wealth pool, then reset them to 0
	# Also save the last quarter's for each group so it can be used for comparisons
	set_variable = {
		name = last_quarter_$poptype$_wealth
		value = $poptype$_wealth
	}
	change_variable = {
		name = $poptype$_wealth
		add = PENDING_$poptype$_wealth
	}
	set_variable = {
		name = PENDING_$poptype$_wealth
		value = 0
	}
}

# EXPERIMENTAL - FOR PIE CHART DISPLAY

ECON_update_wealth_list = {
	# Scope: country
	# Function: Create a list of provinces with variables storing different wealth types and the names of the types
	if = {
		limit = {
			has_variable_list = list_of_wealth_distribution
		}
		every_in_list = {
			variable = list_of_wealth_distribution
			remove_variable = storing_WEALTH_national_data_for
			remove_variable = WEALTH_national_data_type_tooltip
			remove_variable = WEALTH_national_data_value
			remove_variable = WEALTH_national_percentage
			remove_variable = derived_colour
			remove_from_list = list_of_wealth_distribution
		}
	}
	ECON_add_to_wealth_list = {
		POP_LOC_NAME = UPPER_STRATA
		specifier = upper_strata
		derived_colour = culture_group:north_ugric
		data_name = WEALTH_national
	}
	ECON_add_to_wealth_list = {
		POP_LOC_NAME = MIDDLE_STRATA
		specifier = middle_strata
		derived_colour = culture_group:south_celtic
		data_name = WEALTH_national
	}
	ECON_add_to_wealth_list = {
		POP_LOC_NAME = LOWER_STRATA
		specifier = lower_strata
		derived_colour = culture_group:east_slavic
		data_name = WEALTH_national
	}
}

ECON_add_to_wealth_list = {
	# Scope: country
	# Function: Add values to a list of provinces with variables storing different wealth types and the names of the types
	save_scope_as = origin
	random_province = {
		limit = {
			NOT = { has_variable = storing_wealth_data_for }
		}
		save_scope_as = random_province_scope
	}
	add_to_variable_list = {
		name = list_of_wealth_distribution
		target = scope:random_province_scope
	}
	scope:random_province_scope = {
		set_variable = {
			name = storing_$data_name$_data_for
			value = scope:origin
		}
		set_variable = {
			name = $data_name$_data_type_tooltip
			value = flag:$POP_LOC_NAME$_WEALTH
		}
		set_variable = {
			name = $data_name$_data_value
			value = scope:origin.$data_name$_$specifier$
		}
		set_variable = {
			name = derived_colour
			value = $derived_colour$
		}
		set_variable = {
			name = $data_name$_percentage
			value = scope:origin.$data_name$_$specifier$ # Needed for calculating percentage
		}
		change_variable = {
			name = $data_name$_percentage 
			divide = scope:origin.$data_name$_total
		}
	}
}

ECON_distribute_starting_holdings = { #UK only for now
	char:364 = { #Earl Spencer
		add_holding = p:1133 #Boyle - for estates in Sligo
		add_holding = p:1137 #Castlebar - for estates in Sligo
	}
	char:362 = { #Viscount Palmerston
		add_holding = p:6138 #Sligo
	}
	char:88 = { #Duke of Wellington
		add_holding = p:5912 #Taunton, for Wellington proper
		add_holding = p:5583 #Dundalk, for Mornington and Dangan
		add_holding = p:5133 #Wavre in Belgium, estate as Prince of Waterloo
		add_holding = p:8528 #Granada in Spain, for Dehesa Baja estate
	}
	char:369 = { #Duke of Devonshire
		add_holding = p:5014 #Derby, for Chatsworth and Hardwick
		add_holding = p:2319 #Waterford, for Lismore Castle
		add_holding = p:10012 #East Riding, for Londesbrough and Bolton Abbey
		#would put Eastbourne, but the Prince Regent should have Brighton - consider separating Brighton, Eastbourne, Hastings? 
	}
	char:90 = { #Prince Regent
		add_holding = p:5184 #Sussex
	}
	char:359 = { #Earl/Marquess of Londonderry
		add_holding = p:5525 #Belfast, but for estates in County Down
	}
	char:361 = { #Earl Bathurst
		add_holding = p:6152 #Gloucester, for Cirencester. But maybe Lord Stowell should have Gloucester...
	}
	char:366 = { #Earl Grey
		add_holding = p:6996 #Blyth, for Howick Hall
	}
	char:370 = { #Viscount Melbourne
		add_holding = p:2094 #Cavan, for the og Melbourne. Derby is taken by char:369
	}
	char:371 = { #Earl Fitzwilliam
		add_holding = p:5537 #currently called Derry but this is where County Tyrone is
	}
	char:372 = { #Marquess of Sligo
		add_holding = p:2720 #Westport
	}
	char:374 = { #Lord Byron
		add_holding = p:7951 #Nottingham, for Newstead Abbey
	}
	char:386 = { #Duke of Gordon
		add_holding = p:4212 #Moray, for Gordon Castle
	}
	char:388 = { #Duke of Manchester
		add_holding = p:9170 #Cambridgeshire, for Kimbolton
	}
}